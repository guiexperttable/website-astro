---
import {Image} from "astro:assets";
import {Icon} from "astro-icon";
import Glogo from "./glogo.astro";

export interface Props {
  title: string;
  subTitle: string;
  price: string;
  actionLeft: string;
  primary: boolean;
}

const { title, subTitle = '', price, actionLeft = '', primary = false } = Astro.props;
---


<div class:list={[ {'primary': primary}, 'card perpetual single light free glow-effect' ]} >
  <div class="header">
    <div class="icon pl-2">
      <Icon
          pack="mdi"
          name="gavel"
          class="h-12 text-center"/>
    </div>
    <div class="pl-6">
      <div class="font-bold text-lg">{title}</div>
      <div class="text-sm">{subTitle}</div>
    </div>
  </div>
  <div class="align-center grid logo-div">
    <Glogo size={250}></Glogo>
  </div>
  <div class="content p-6">
    <div
        class="font-medium text-xl grid p-4 items-center justify-center"
        title="{price}">{price}
    </div>
    <div>
      <slot/>
    </div>
  </div>
  <div class="footer p-6">
      <div class="items-center justify-center text-sm">
        {actionLeft}
      </div>
      <div class="items-center justify-center">
        <slot name="action" />
      </div>
  </div>

  <svg class="glow-container">
    <rect
        pathLength="100"
        stroke-linecap="round"
        class="glow-blur"></rect>
    <rect
        pathLength="100"
        stroke-linecap="round"
        class="glow-line"></rect>
  </svg>
</div>


<style>
    .card {
        min-width: 400px;
        min-height: 550px;
        @apply border-default text-default bg-offset;
    }
    .card.primary {
        background-color: #6366f116;
    }

    .card .header {
        height: 60px;
        display: grid;
        grid-template-columns: 60px 1fr;
    }

    .card .header > div {
        display: grid;
        align-items: center;
    }

    .card .content,
    .card .footer {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between ;
    }

    .logo-div {
        display: grid;
        place-items: center;
        min-height: 300px;
    }

    .glow-effect {
        --glow-line-color: var(--tw-gradient-from, #d946ef);
        --glow-line-thickness: 2px;
        --glow-line-length: 20px;
        --glow-blur-color: var(--tw-gradient-from, #6366f1);
        --glow-blur-size: 5px;
        --glow-offset: 0px;
        --animation-speed: 1200ms;
        /* do not change, used for calculations */
        --container-offset: 100px;
        position: relative;
    }

    .glow-container {
        pointer-events: none;
        position: absolute;
        inset: calc(var(--container-offset) / -2);
        width: calc(100% + var(--container-offset));
        height: calc(100% + var(--container-offset));
        opacity: 0;
        /* outline: 3px solid blue; */
    }

    .glow-blur,
    .glow-line {
        width: calc(100% - var(--container-offset) + var(--glow-offset));
        height: calc(100% - var(--container-offset) + var(--glow-offset));
        x: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
        y: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
        /* rx: 1.25rem; */
        fill: transparent;
        stroke: black;
        stroke-width: 5px;
        stroke-dasharray: var(--glow-line-length) calc(50px - var(--glow-line-length));
    }

    .glow-effect:is(:hover, :focus) :is(.glow-line, .glow-blur) {
        stroke-dashoffset: -80px;
        transition: stroke-dashoffset var(--animation-speed) ease-in;
    }

    .glow-line {
        stroke: var(--glow-line-color);
        stroke-width: var(--glow-line-thickness);
    }

    .glow-blur {
        filter: blur(var(--glow-blur-size));
        stroke: var(--glow-blur-color);
        stroke-width: var(--glow-blur-size);
    }

    .glow-effect:is(:hover, :focus) .glow-container {
        animation: glow-visibility ease-in-out var(--animation-speed);
    }

    @keyframes glow-visibility {
        0%,
        100% {
            opacity: 0;
        }
        25%,
        75% {
            opacity: 1;
        }
    }

    .glow-effect[data-glow-animation="false"] {
        --glow-line-length: 50px;
    }

    .glow-effect[data-glow-offset="true"] {
        --glow-offset: 10px;
    }

    .glow-effect[data-glow-animation="grow"]:is(:hover, :focus) .glow-container {
        scale: 1.3;
        transition: scale var(--animation-speed) linear;
    }

</style>