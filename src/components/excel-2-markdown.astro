---

const id = 'table' + Math.random().toString(36).slice(2, 11);
---

<div class="p-6">
  <p>
    Copy Table in <span class="text-primary">Excel</span> and
    Paste as a <span class="text-primary">Markdown Table</span>
  </p>
  <div class="w-full">
    <textarea
        rows="10"
        class:list={[id, 'w-full bg-transparent']}></textarea>
  </div>
</div>

<script
    is:inline
    define:vars={{id}}
    type="module">

  // Erhalte das Editor-Element
  const editor = document.querySelector('.' + id);


  // Berechne die Breite einer Spalte in einem Array von Zeilen
  function columnWidth(rows, columnIndex) {
    // Verwende reduce, um das Maximum der Längen der Elemente an einem bestimmten Index zu finden
    return rows.reduce((max, row) => Math.max(max, row[columnIndex].length), 0);
  }

  // Überprüfe, ob die Daten wie eine Tabelle aussehen
  function looksLikeTable(data) {
    // Verwende einen regulären Ausdruck, um zu überprüfen, ob die Daten Tabulatoren oder Zeilenumbrüche enthalten
    return /\t|\r?\n/.test(data);
  }


  function onPaste(event) {
    // Erhalte die Daten aus der Zwischenablage als Text
    const clipboard = event.clipboardData;
    let data = clipboard.getData("text/plain");

    // Entferne den letzten Zeilenumbruch aus den Daten
    data = data.replace(/(?:[\n\u0085\u2028\u2029]|\r\n?)$/, "");

    // Überprüfe, ob die Daten wie eine Tabelle aussehen
    if (looksLikeTable(data)) {
      // Verhindere das Standardverhalten des Einfügens
      event.preventDefault();
    } else {
      // Beende die Funktion, wenn die Daten keine Tabelle sind
      return;
    }

    // Teile die Daten in Zeilen und Spalten auf
    const rows = data.split(/[\n\u0085\u2028\u2029]|\r\n?/g).map((row) => {
      // Gib die Zeile in der Konsole aus
      console.log(row);
      // Teile die Zeile an den Tabulatoren auf
      return row.split("\t");
    });

    // Erstelle ein Array für die Spaltenausrichtungen
    const colAlignments = [];

    // Erstelle ein Array für die Spaltenbreiten
    const columnWidths = rows[0].map((column, columnIndex) => {
      // Setze die Standardausrichtung auf links
      let alignment = "l";

      // Verwende einen regulären Ausdruck, um die Ausrichtungsanweisung am Anfang der Spalte zu finden
      const re = /^(\^[lcr])/i;
      const m = column.match(re);

      // Wenn es eine Ausrichtungsanweisung gibt, setze die Ausrichtung entsprechend
      if (m) {
        const align = m[1][1].toLowerCase();
        if (align === "c") {
          alignment = "c";
        } else if (align === "r") {
          alignment = "r";
        }
      }

      // Füge die Ausrichtung zum Array hinzu
      colAlignments.push(alignment);

      // Entferne die Ausrichtungsanweisung aus der Spalte
      column = column.replace(re, "");

      // Aktualisiere die Spalte im Array
      rows[0][columnIndex] = column;

      // Berechne die Breite der Spalte
      return columnWidth(rows, columnIndex);
    });

    // Erstelle ein Array für die Markdown-Zeilen
    const markdownRows = rows.map((row, rowIndex) => {
      // Erstelle eine Markdown-Zeile aus den Spalten und füge Leerzeichen hinzu, um die Breite auszugleichen
      return (
        "| " +
        row
          .map(
            (column, index) =>
              column + " ".repeat(columnWidths[index] - column.length + 1)
          )
          .join(" | ") +
        " |"
      );
    });

    // Füge eine Trennzeile nach der ersten Zeile hinzu, um die Spaltenausrichtungen anzuzeigen
    markdownRows.splice(
      1,
      0,
      "|" +
      columnWidths
        .map((width, index) => {
          // Setze das Präfix und das Postfix für die Ausrichtung
          let prefix = "";
          let postfix = "";
          let adjust = 0;
          const alignment = colAlignments[index];
          if (alignment === "r") {
            postfix = ":";
            adjust = 1;
          } else if (alignment === "c") {
            prefix = ":";
            postfix = ":";
            adjust = 2;
          }

          // Erstelle eine Trennzeile aus Bindestrichen und füge das Präfix und das Postfix hinzu
          return prefix + "-".repeat(width + 3 - adjust) + postfix;
        })
        .join("|") +
      "|"
    );

    // Setze den Wert des Editors auf die Markdown-Zeilen
    event.target.value = markdownRows.join("\n");

    editor.select();
    // Gib false zurück, um das Einfügen zu beenden
    return false;
  }

  // Füge einen Event-Listener für das Einfügen von Daten hinzu
  editor.addEventListener("paste", onPaste);

  editor.focus();
</script>


<style>
    textarea {
        height: calc(100vh - 350px);
    }
</style>