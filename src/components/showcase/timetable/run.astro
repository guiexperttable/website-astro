---

const id = 'div' + Math.random().toString(36).slice(2, 11);
---

<div
    style="height: calc(100vh - 128px)"
    class={id}></div>


<script
    is:inline
    define:vars={{id}}
    type="module">

  import { TableScope, EventAdapter, SimpleDomService } from '/scripts/table/index.js'
  import {createTimeTableModel, tableOptions, COL_IDX_UPDATED_AT} from "/scripts/demo-table-models/index.js";

  const tableModel = createTimeTableModel();
  const ele = document.querySelector('.' + id);

  const tableScope = new TableScope(
    ele,
    tableModel,
    new SimpleDomService(),
    tableOptions,
    new EventAdapter()
  );
  tableScope.firstInit();

  const tableApi = tableScope.getApi();

  // Start fake realtime updates:
  sendUpdateTableModelEvents();

  function sendUpdateTableModelEvents() {
    // normally we would do this:
    //    this.tableApi?.updateCells([new TableCellUpdateEvent("body", row, col, val)]);
    // but because we have to calculate the footer cells we
    // do an update of the model directly and trigger a table repaint() at the end:
    const bodyModel = tableModel.getBodyModel();
    const footerModel = tableModel.getAreaModel("footer");

    if (bodyModel && footerModel) {
      const eventCount = Math.round(1 + 3 * Math.random());
      const rowMax = (bodyModel?.getRowCount() ?? 0) - 1;
      const now = new Date();

      for (let i = 0; i < eventCount; i++) {
        const val = Math.floor(999 * Math.random());
        const col = rndm(4, COL_IDX_UPDATED_AT - 1);
        const row = rndm(0, rowMax);
        // Update value cell and timestamp cell:
        bodyModel.setValue(row, col, val);
        bodyModel.setValue(row, COL_IDX_UPDATED_AT, now);
      }
      // Calculate the column sum:
      for (let c = 4; c < COL_IDX_UPDATED_AT; c++) {
        let sum = 0;
        for (let r = 0; r < rowMax; r++) {
          sum = sum + bodyModel.getValueAt(r, c);
        }
        // Update footer:
        footerModel.setValue(0, c, sum);
      }
      tableApi.repaint();
    }

    setTimeout(() => {
      requestAnimationFrame(()=>sendUpdateTableModelEvents());
    }, 16);
  }

  function rndm(from, to) {
    return Math.min(to, Math.round(from + (to - from) * Math.random()));
  }

</script>

<style>
    div {
        font-size: 14px;
    }
</style>