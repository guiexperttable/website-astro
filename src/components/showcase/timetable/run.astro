---
const id = 'div' + Math.random().toString(36).slice(2, 11);
const idOut = 'out' + Math.random().toString(36).slice(2, 11);
---

<div
    style="height: calc(100vh - 128px)"
    class={id}></div>

<div class:list={[idOut, 'out-div']}></div>

<script
    is:inline
    define:vars={{id, idOut}}
    type="module">

  import { TableScope, EventAdapter, SimpleDomService, TableCellUpdateEvent } from '/scripts/table/index.js'
  import {createTimeTableModel, tableOptions, COL_IDX_UPDATED_AT} from "/scripts/demo-table-models/index.js";

  const tableModel = createTimeTableModel();
  const ele = document.querySelector('.' + id);
  const eleOut = document.querySelector('.' + idOut);

  const tableScope = new TableScope(
    ele,
    tableModel,
    new SimpleDomService(),
    tableOptions,
    new EventAdapter()
  );
  tableScope.firstInit();

  const tableApi = tableScope.getApi();
  let oddTick = true;
  let lastTick = Date.now();
  let count = 0;

  // Start fake realtime updates:
  sendUpdateTableModelEvents();




  function sendUpdateTableModelEvents() {
    const bodyModel = tableModel.getBodyModel();
    const footerModel = tableModel.getAreaModel("footer");

    if (bodyModel && footerModel) {
      oddTick = !oddTick;
      count++;

      const now = Date.now();
      if (count>60){
        const deltaTime = now - lastTick;
        eleOut.innerText = 'FPS: ' + Math.round(count/deltaTime * 1000);
        lastTick = now;
        count = 0;
      }


      const eventCount = Math.round(1 + 3 * Math.random());
      const rowMax = (bodyModel?.getRowCount() ?? 0) - 1;


      for (let i = 0; i < eventCount; i++) {
        const val = Math.floor(999 * Math.random());
        const col = rndm(4, COL_IDX_UPDATED_AT - 1);
        const row = rndm(0, rowMax);

        const oldVal = bodyModel.getValueAt(row, col);
        const cssClasses = {
          'bg-green-0': false,
          'bg-green-1': false,
          'bg-red-0': false,
          'bg-red-1': false,
        };
        const color = val>oldVal ? 'green': 'red';
        const suffix = oddTick ? '-1': '-0';
        const key = ('bg-' + color + suffix);
        cssClasses[key] = true;

        // Update value cell and timestamp cell:
        bodyModel.setValue(row, col, val);
        bodyModel.setValue(row, COL_IDX_UPDATED_AT, now);

        // Update value cell and timestamp cell:
        tableApi.updateCells([new TableCellUpdateEvent('body', row, col, val, cssClasses)]);
        tableApi.updateCells([new TableCellUpdateEvent('body', row, COL_IDX_UPDATED_AT, now)]);
      }
      // Calculate the column sum:
      for (let c = 4; c < COL_IDX_UPDATED_AT; c++) {
        let sum = 0;
        for (let r = 0; r < rowMax; r++) {
          sum = sum + bodyModel.getValueAt(r, c);
        }
        // Update footer:
        tableApi.updateCells([new TableCellUpdateEvent('footer', 0, c, sum)]);
      }
    }

    setTimeout(() => {
      requestAnimationFrame(()=>sendUpdateTableModelEvents());
    }, 16);
  }

  function rndm(from, to) {
    return Math.min(to, Math.round(from + (to - from) * Math.random()));
  }

</script>

<style>
    div {
        font-size: 14px;
    }
    .out-div {
        font-size: 15px;
        position: absolute;
        top: 80px;
        left: 255px;
        width: 100px;
        height: 32px;
        overflow-y: clip;
        color: transparent;
    }
</style>


<style is:global>

    @keyframes color-green {
        0%, 100%   { background: transparent; }
        50%  { background: #33CC3644; }
    }
    .bg-green-0,
    .bg-green-1,
    .bg-green-0 > div,
    .bg-green-1 > div,
    .bg-green-0 > div > div,
    .bg-green-1 > div > div
    {
        animation: color-green 2s ease-in-out;
    }


    @keyframes color-red {
        0%, 100%   { background: transparent; }
        50%  { background: #cc333344; }
    }
    .bg-red-0,
    .bg-red-1,
    .bg-red-0 > div,
    .bg-red-1 > div,
    .bg-red-0 > div > div,
    .bg-red-1 > div > div
    {
        animation: color-red 2s ease-in-out;
    }
</style>