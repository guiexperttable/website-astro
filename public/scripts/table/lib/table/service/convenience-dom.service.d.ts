import { DomServiceIf } from "./dom-service.if";
import { DivScope } from "./../data/div-scope.type";
import { GeoData } from "./../data/geo-data";
import { TreeArrowType } from "../data/common/tree-arrow.type";
import { TreeOptionsIf } from "../data/options/tree-options.if";
import { AreaIdent } from "../data/tablemodel/area-ident.type";
import { TableOptionsIf } from "../data/options/table-options.if";
import { CheckedType } from "../data/common/checked-type";
import { SideIdent } from "../data/side-ident.type";
import { SortState } from "../data/common/sort-state.type";
import { SortedOptionsIf } from "../data/options/sorted-options.if";
import { HtmlStyle } from "./data/html-style.type";
export declare class ConvenienceDomService {
    readonly domService: DomServiceIf;
    constructor(domService: DomServiceIf);
    setStyle(el: any, style: string, value: any): any;
    applyStyle(ele: HTMLDivElement, style: HtmlStyle): HTMLDivElement;
    applyDisplayNoneStyle(ele: HTMLDivElement): HTMLDivElement;
    applyDisplayBlockStyle(ele: HTMLDivElement): HTMLDivElement;
    applyStyleInPx(ele: HTMLDivElement, geoData: GeoData): HTMLDivElement;
    applyStylePosistionRelative(ele: HTMLDivElement): HTMLDivElement;
    applyStylePosistionAbsolute(ele: HTMLDivElement): HTMLDivElement;
    applyStyleFullSize(ele: HTMLDivElement): HTMLDivElement;
    applyStyleOverflowAuto(overflowX: "auto" | "scroll" | undefined, overflowY: "auto" | "scroll" | undefined, ele: HTMLDivElement): HTMLDivElement;
    applyStyleNoPadding(ele: HTMLDivElement): HTMLDivElement;
    appendRelativeChildDiv(parent: HTMLDivElement): DivScope;
    appendText(parent: HTMLDivElement, text: string): HTMLElement;
    addClass(clazz: string, div: HTMLDivElement): HTMLDivElement;
    addClasses(classes: string[] | undefined, div: HTMLDivElement): HTMLDivElement;
    setAttribute(div: HTMLDivElement, key: string, value: string): HTMLDivElement;
    createAreaDivWithClass(clazz: string, parent: HTMLDivElement, areaIdent: AreaIdent, sideIdent: SideIdent): HTMLDivElement;
    createDivWithClass(clazz: string, parent: HTMLDivElement): HTMLDivElement;
    addRowDiv(divScope: DivScope, geo: GeoData, rowIndex: number | undefined, areaIdent: AreaIdent, sideIdent: SideIdent, text?: string): HTMLDivElement;
    addColumnDiv(parent: HTMLDivElement, geo: GeoData, rowIndex: number | undefined, columnIndex: number | undefined, areaIdent: AreaIdent, sideIdent: SideIdent, text?: string, treeArrow?: TreeArrowType, tableOptions?: TableOptionsIf, checkedType?: CheckedType | undefined, sortState?: SortState): HTMLDivElement;
    addCheckboxToDiv(parent: HTMLDivElement, checkedType: CheckedType, areaIdent: AreaIdent, rowIndex: number): HTMLDivElement;
    addLabelDiv(parent: HTMLDivElement, text?: string, firstTreeColumn?: boolean, rowIndex?: number, columnIndex?: number, areaIdent?: AreaIdent): HTMLDivElement;
    addSortedIcon(parent: HTMLDivElement, sorted?: SortState, sortedOptions?: SortedOptionsIf, columnIndex?: number): HTMLDivElement;
    addArrowDiv(parent: HTMLDivElement, arrow?: TreeArrowType, treeOptions?: TreeOptionsIf, rowIndex?: number, columnIndex?: number, areaIdent?: AreaIdent): HTMLDivElement;
    addColumnBorderDivs(tableOptions: TableOptionsIf, parent: HTMLDivElement, geo: GeoData, areaIdent: AreaIdent, sideIdent: SideIdent): HTMLDivElement;
    addHorizontalBorder(geo: GeoData, parent: HTMLDivElement, clazz?: string): HTMLDivElement;
    addFocusBorderDivs(parent: HTMLDivElement, geo: GeoData, style: HtmlStyle): HTMLDivElement;
    addVerticalBorder(geo: GeoData, parent: HTMLDivElement, clazz?: string): HTMLDivElement;
    addDiv(parent: HTMLDivElement, geo: GeoData, clazz?: string): HTMLDivElement;
    applyStyleString(div: HTMLDivElement, style: string): void;
    private getDivOrCreateDiv;
}
