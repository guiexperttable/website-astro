import { TableModelIf } from "./data/tablemodel/table-model.if";
import { AreaIdent } from "./data/tablemodel/area-ident.type";
import { GeMouseEvent } from "./data/common/event/ge-mouse-event";
import { DomServiceIf } from "./service/dom-service.if";
import { TableOptionsIf } from "./data/options/table-options.if";
import { MouseHandler } from "./mouse-handler";
import { EventListenerIf } from "./event-listener.if";
import { TableApi } from "./table-api";
import { StoreStateCollapsedExpandService } from "./service/store-state-collapsed-expand.service";
import { StoreStateSortingService } from "./service/store-state-sorting.service";
import { RenderScope } from "./render-scope";
import { InputHandler } from "./input-handler";
import { SelectionService } from "./selection/selection-service";
import { GeKeyEvent } from "./data/common/event/ge-key-event";
import { OnActionTriggeredIf } from "./action/on-action-triggered.if";
import { ActionId } from "./action/action-id.type";
import { ShortcutService } from "./action/shortcut.service";
export declare class TableScope extends RenderScope implements OnActionTriggeredIf {
    protected readonly eventListener: EventListenerIf;
    mouseHandler: MouseHandler;
    inputHandler: InputHandler;
    shortcutService: ShortcutService;
    storeStateCollapsedExpandService?: StoreStateCollapsedExpandService;
    storeSortingService?: StoreStateSortingService;
    protected selectionService: SelectionService;
    protected keyEvent?: GeKeyEvent;
    private api;
    private mouseStartAction;
    private mouseStartWidth;
    private mouseStartColumnIndex;
    private dragFrom;
    private dragTo;
    static create(hostElement: HTMLDivElement, tableModel: TableModelIf, tableOptions?: TableOptionsIf, eventListener?: EventListenerIf, domService?: DomServiceIf): TableScope;
    constructor(hostElement: HTMLDivElement, tableModel: TableModelIf, domService: DomServiceIf, tableOptions: TableOptionsIf, eventListener: EventListenerIf);
    onActionTriggered(actionId: ActionId): boolean;
    updateModelValueAfterEdit(areaIdent: AreaIdent, rowIndex: number, columnIndex: number, value: string): void;
    getApi(): TableApi;
    firstInit(): TableScope;
    createGeMouseEvent(mouseEvent: MouseEvent): GeMouseEvent;
    onMouseDown(mouseEvent: GeMouseEvent): void;
    mouseDraggingOnFrame(mouseEvent: GeMouseEvent): void;
    mouseDraggingEndOnFrame(mouseEvent: GeMouseEvent): void;
    mouseMove(mouseMoveEvent: GeMouseEvent): void;
    contextmenu(mouseMoveEvent: GeMouseEvent): void;
    toggleExpandCollapseAll(expand?: boolean): void;
    toggleRowCheckbox(rowIdx: number, _colIdx: number, areaIdent: AreaIdent): void;
    onMouseClicked(evt: GeMouseEvent, previousEvt: GeMouseEvent | undefined): void;
    externalFilterChanged(clearSelection?: boolean): void;
    onHeaderDblClicked(event: MouseEvent, _rowIdx: number, colIdx: number): void;
    private changeFocusCell;
    private resizeColumn;
    private clearSelectionModel;
    private debugOnce;
    private autoRestoreScrollPosition;
    private autoRestoreSortingState;
    private autoRestoreCollapsedExpandedState;
}
