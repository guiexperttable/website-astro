import { AreaIdent } from '../area-ident.type';
import { ColumnDefIf } from '../column/column-def.if';
import { AreaModelIf } from './area-model.if';
import { CellGroupIf } from '../cellgroup/cell-group.if';
import { CheckboxModelIf } from '../../../checkbox/checkbox-model.if';
import { SortItem } from '../../common/sort-item';
import { FilterFunction } from '../../common/filter-function';
import { CellRendererIf } from '../../../renderer/cell-render.if';
import { CheckedType } from '../../common/checked-type';
import { CellGroupExt } from '../cellgroup/cell-group-ext';
import { MouseTargetData } from '../../event/mouse-target-data';
import { HeaderGroupOptionsIf } from '../../options/header-group-options.if';
export declare class AreaModelCellGroups implements AreaModelIf {
    readonly areaIdent: AreaIdent;
    readonly groups: CellGroupIf[];
    columnDefs: ColumnDefIf[];
    readonly defaultRowHeight: number;
    gammaCells: boolean;
    rowSelectionModel: CheckboxModelIf<any> | undefined;
    arr: (CellGroupExt | null | undefined)[][];
    private groupExts;
    private cellGroupExtCellRenderer;
    constructor(areaIdent: AreaIdent, groups: CellGroupIf[], columnDefs: ColumnDefIf[], defaultRowHeight: number, headerGroupOptions?: HeaderGroupOptionsIf);
    getAllLeafs(): CellGroupExt[];
    getMaxRowCount(): number;
    buildArray(): (CellGroupExt | null | undefined)[][];
    changeColumnOrder(_sourceColumnIndex: number, _targetColumnIndex: number): void;
    doSort(_sortItems: SortItem[]): boolean;
    externalFilterChanged<T>(_predictFn: FilterFunction<T>): void;
    getCellRenderer(_rowIndex: number, _columnIndex: number): CellRendererIf | undefined;
    getColspanAt(rowIndex: number, columnIndex: number): number;
    getCustomClassesAt(_rowIndex: number, _columnIndex: number): string[];
    getCustomStyleAt(_rowIndex: number, _columnIndex: number): {
        [p: string]: string;
    } | undefined;
    getMaxColspan(): number;
    getMaxRowspan(): number;
    getRowByIndex(_rowIndex: number): any;
    getRowCount(): number;
    getRowspanAt(rowIndex: number, columnIndex: number): number;
    getTooltipAt(_rowIndex: number, _columnIndex: number): any;
    getValueAt(rowIndex: number, columnIndex: number): any;
    getTextValueAt(rowIndex: number, columnIndex: number): string;
    getYPosByRowIndex(_rowIndex: number): number;
    init(): void;
    getRowHeight(_rowIndex: number): number;
    isEditable(_rowIndex: number, _columnIndex: number): boolean;
    isFilterable(): boolean;
    isRowCheckable(_rowIndex: number): boolean;
    isRowChecked(_rowIndex: number): CheckedType | undefined;
    isSelectable(_rowIndex: number, _columnIndex: number): boolean;
    setRowChecked(_rowIndex: number, _checked: boolean): void;
    setValue(_rowIndex: number, _columnIndex: number, _value: any): boolean;
    toggleHeaderGroup(mouseTargetData: MouseTargetData): void;
}
