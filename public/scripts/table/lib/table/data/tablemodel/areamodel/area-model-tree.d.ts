import { TreeRow } from "../../common/tree-row";
import { AbstractAreaModel } from "./abstract-area-model";
import { AreaIdent } from "../area-ident.type";
import { ColumnDefIf } from "../column/column-def.if";
import { FilterFunction } from "../../common/filter-function";
import { SorterService } from "../../../service/sorter.service";
import { SortItem } from "../../common/sort-item";
export declare class AreaModelTree<S> extends AbstractAreaModel<TreeRow<S>> {
    areaIdent: AreaIdent;
    readonly rows: TreeRow<S>[];
    defaultRowHeight: number;
    protected columnDefs: ColumnDefIf[];
    protected readonly properties: string[];
    protected sorterService: SorterService;
    private readonly service;
    private filteredFlattenRows;
    private flattenRows;
    private lastPredictFn?;
    constructor(areaIdent: AreaIdent, rows: TreeRow<S>[], defaultRowHeight: number, columnDefs?: ColumnDefIf[]);
    changeColumnOrder(sourceColumnIndex: number, targetColumnIndex: number): void;
    recalcVisibleTreeRows(): void;
    getFilteredFlattenRows(): TreeRow<S>[];
    getRowCount(): number;
    getValueAt(rowIndex: number, columnIndex: number): any;
    getRowHeight(_rowIndex: number): number;
    getCustomClassesAt(rowIndex: number, _columnIndex: number): string[];
    getRowByIndex(idx: number): TreeRow<S> | undefined;
    getValueByT(t: S, property: string): any;
    externalFilterChanged<S>(predictFn: FilterFunction<S>): void;
    doSort(sortItems: SortItem[]): boolean;
    toggleExpandCollapseAll(expanded: boolean): void;
    setAllParentsOk(item: TreeRow<any>): boolean;
    setValue(rowIndex: number, columnIndex: number, value: any): boolean;
    protected genericTreeTableSortComparator(property: string, f: number): (a: TreeRow<S>, b: TreeRow<S>) => number;
    private expandAllRecursive;
    private doFiltering;
    private getPropertyValue;
    private treeSort;
}
